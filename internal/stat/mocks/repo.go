// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	banner "github.com/soadmized/banners_rotator/internal/banner"

	mock "github.com/stretchr/testify/mock"

	stat "github.com/soadmized/banners_rotator/internal/stat"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddBanner provides a mock function with given fields: ctx, slotID, bannerID
func (_m *Repository) AddBanner(ctx context.Context, slotID string, bannerID string) error {
	ret := _m.Called(ctx, slotID, bannerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddClick provides a mock function with given fields: ctx, slotID, bannerID, groupID
func (_m *Repository) AddClick(ctx context.Context, slotID string, bannerID string, groupID string) error {
	ret := _m.Called(ctx, slotID, bannerID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, slotID, bannerID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddShow provides a mock function with given fields: ctx, slotID, bannerID, groupID
func (_m *Repository) AddShow(ctx context.Context, slotID string, bannerID string, groupID string) error {
	ret := _m.Called(ctx, slotID, bannerID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, slotID, bannerID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBannerIDs provides a mock function with given fields: ctx, slotID
func (_m *Repository) GetBannerIDs(ctx context.Context, slotID string) ([]banner.ID, error) {
	ret := _m.Called(ctx, slotID)

	var r0 []banner.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]banner.ID, error)); ok {
		return rf(ctx, slotID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []banner.ID); ok {
		r0 = rf(ctx, slotID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]banner.ID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slotID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStat provides a mock function with given fields: ctx, slotID, bannerID, groupID
func (_m *Repository) GetStat(ctx context.Context, slotID string, bannerID string, groupID string) (*stat.Stat, error) {
	ret := _m.Called(ctx, slotID, bannerID, groupID)

	var r0 *stat.Stat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*stat.Stat, error)); ok {
		return rf(ctx, slotID, bannerID, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *stat.Stat); ok {
		r0 = rf(ctx, slotID, bannerID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stat.Stat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, slotID, bannerID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBanner provides a mock function with given fields: ctx, slotID, bannerID
func (_m *Repository) RemoveBanner(ctx context.Context, slotID string, bannerID string) error {
	ret := _m.Called(ctx, slotID, bannerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
